#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xil_cache.h"
#include "sleep.h"
#include "xaxidma.h"
#include "xaxicdma.h" // test

#include "PCV_pkt_32b.h" // PCV[]

#define DMA_MAIN_ID					XPAR_AXI_DMA_0_DEVICE_ID
#define CDMA_ID						XPAR_AXI_CDMA_0_DEVICE_ID

/********* Instances DMA Test *********/
XAxiDma_Config *CfgPtr_DMA_MAIN;   				 /* Pointer to the configuration of DMA */
XAxiDma DMA_MAIN;

/********* Instances CDMA Test *********/
XAxiCdma AxiCdmaInstance;						/* Instance of the XAxiCdma */
XAxiCdma_Config *CfgPtr;

int main()
{
    init_platform();
    Xil_DCacheDisable();
    Xil_DCacheFlush();

    xil_printf("Avvio Programma\n\r");

    /*********** TEST  CDMA Driver ***********/
    	/* Initialize the XAxiCdma device.
    	 */
    	CfgPtr = XAxiCdma_LookupConfig(CDMA_ID);
    	if (!CfgPtr) {
    		return XST_FAILURE;
    	}

    	int Status_cdma = XAxiCdma_CfgInitialize(&AxiCdmaInstance, CfgPtr, CfgPtr->BaseAddress);
    	if (Status_cdma != XST_SUCCESS) {
    		return XST_FAILURE;
    	} else xil_printf("CDMA inizializzato\r\n");
    	/* Disable interrupts, we use polling mode
    	 */
    	XAxiCdma_IntrDisable(&AxiCdmaInstance, XAXICDMA_XR_IRQ_ALL_MASK);

    	/* Try to start the DMA transfer
    	  */
    		Xil_DCacheFlushRange((u32)PCV,(15*13)*sizeof(u32));

    		Status_cdma = XAxiCdma_SimpleTransfer(&AxiCdmaInstance, (u32)PCV, 0x62000000  , (15*13)*sizeof(u32) , NULL, NULL);  // dest << BRAM_CTRL ConfigPtr->MemBaseAddress
    		if (Status_cdma == XST_SUCCESS) {
    			xil_printf("CDMA Failed \r\n");
    			return XST_FAILURE;
    		}else xil_printf("CDMA programmato....\r\n");


    	/* Wait until the DMA transfer is done
    	 */
    	while (XAxiCdma_IsBusy(&AxiCdmaInstance)) {
    		/* Wait */
    		xil_printf("CDMA sta inviando....\r\n");
    		sleep(2);
    	}
    	xil_printf("CDMA ha trasferito i dati con successo!!! \r\n");
        /*************************************************/

    cleanup_platform();
    return 0;
}
