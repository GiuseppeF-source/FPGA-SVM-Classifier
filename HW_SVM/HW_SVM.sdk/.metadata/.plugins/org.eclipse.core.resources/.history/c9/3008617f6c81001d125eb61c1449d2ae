
#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xil_cache.h"
#include "xgpio.h"
#include "sleep.h"
#include "xaxidma.h"

#include "Attribute_pkt_32b.h"
#include "PCV_pkt_32b.h" // PCV[]
#include "Kernel_Scale_pkt_32b.h" // Kernel_Scale[]
#include "Bias_pkt_32b.h"  // Bias[]

/********* GPIO *********/
XGpio Gpio; 					/* The Instance of the GPIO Driver */
/* The following constant is used to determine which channel of the GPIO is used. */
#define START 1
#define CLASSIFICATION 2

/********* Instances DMA *********/
#define DMA_MAIN_ID					XPAR_AXI_DMA_0_DEVICE_ID
#define DMA_load_PCV_ID 			XPAR_AXI_DMA_1_DEVICE_ID
#define DMA_load_Kernel_Scale_ID 	XPAR_AXI_DMA_2_DEVICE_ID
#define DMA_load_Bias_ID 			XPAR_AXI_DMA_3_DEVICE_ID

XAxiDma_Config *CfgPtr_DMA_MAIN;   				 /* Pointer to the configuration of DMA */
XAxiDma DMA_MAIN;								 /* The Instance of the DMA */

XAxiDma_Config *CfgPtr_DMA_load_PCV; 			 /* Pointer to the configuration of DMA */
XAxiDma DMA_load_PCV;				 			 /* The Instance of the DMA */

XAxiDma_Config *CfgPtr_DMA_load_Kernel_Scale;    /* Pointer to the configuration of DMA */
XAxiDma DMA_load_Kernel_Scale;							 /* The Instance of the DMA */

XAxiDma_Config *CfgPtr_DMA_load_Bias; 		     /* Pointer to the configuration of DMA */
XAxiDma DMA_load_Bias;							 /* The Instance of the DMA */

u32 Result[36];           // risultati della classificazione, i 3bit meno significativi sono effettivi

int main()
{
    init_platform();
    Xil_DCacheDisable();
    Xil_DCacheFlush();
    xil_printf("Avvio Programma\n\r");

	/*********** Initialize the GPIO driver ***********/
    int Status_Gpio;

		Status_Gpio = XGpio_Initialize(&Gpio, XPAR_GPIO_0_DEVICE_ID);

		if (Status_Gpio != XST_SUCCESS) {
			xil_printf("Gpio Initialization Failed\r\n");
			return XST_FAILURE;
		}else xil_printf("Gpio Initialized \r\n");

		/* Set the direction for all signals  */
		XGpio_SetDataDirection(&Gpio, START         , 0); // channel 1 -> start -> output
		XGpio_SetDataDirection(&Gpio, CLASSIFICATION, 0); // channel 2 -> classification -> output
		xil_printf("GPIO per controllo FSM  settati in output \r\n");

		/* Send combination 00 -> STATE IDLE to PL */
		XGpio_DiscreteWrite(&Gpio, START         , 0);
		XGpio_DiscreteWrite(&Gpio, CLASSIFICATION, 0);
		xil_printf("START = 0 , CLASSIFICATION = 0  -> IDLE MODE\r\n");

	/*********** END Initialize GPIO ***********/

		/*********** Initialize the DMA driver ***********/
		int Status_DMA;

		/////// DMA_MAIN ///////
			CfgPtr_DMA_MAIN = XAxiDma_LookupConfig(DMA_MAIN_ID);
			if (!CfgPtr_DMA_MAIN) {
				xil_printf("No config found for %d\r\n", DMA_MAIN_ID);
				return XST_FAILURE;
			}

			Status_DMA = XAxiDma_CfgInitialize(&DMA_MAIN, CfgPtr_DMA_MAIN);
			if (Status_DMA != XST_SUCCESS) {
				xil_printf("Initialization failed %d\r\n", Status_DMA);
				return XST_FAILURE;
			}else xil_printf("DMA_MAIN -> Inizializzato \r\n");

			/* Disable interrupts,  use polling mode */
			XAxiDma_IntrDisable(&DMA_MAIN, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
			XAxiDma_IntrDisable(&DMA_MAIN, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);

		/////// DMA_load_PCV ///////
			CfgPtr_DMA_load_PCV = XAxiDma_LookupConfig(DMA_load_PCV_ID);
			if (!CfgPtr_DMA_load_PCV) {
				xil_printf("No config found for %d\r\n", DMA_load_PCV_ID);
				return XST_FAILURE;
			}

			Status_DMA = XAxiDma_CfgInitialize(&DMA_load_PCV, CfgPtr_DMA_load_PCV);
			if (Status_DMA != XST_SUCCESS) {
				xil_printf("Initialization failed %d\r\n", Status_DMA);
				return XST_FAILURE;
			} else  xil_printf("DMA_load_PCV -> Inizializzato \r\n");

			/* Disable interrupts,  use polling mode */
			XAxiDma_IntrDisable(&DMA_load_PCV, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
			XAxiDma_IntrDisable(&DMA_load_PCV, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);

		/////// DMA_load_Kernel_Scale ///////
			CfgPtr_DMA_load_Kernel_Scale = XAxiDma_LookupConfig(DMA_load_Kernel_Scale_ID);
			if (!CfgPtr_DMA_load_Kernel_Scale) {
				xil_printf("No config found for %d\r\n", DMA_load_Kernel_Scale_ID);
				return XST_FAILURE;
			}

			Status_DMA = XAxiDma_CfgInitialize(&DMA_load_Kernel_Scale, CfgPtr_DMA_load_Kernel_Scale);
			if (Status_DMA != XST_SUCCESS) {
				xil_printf("Initialization failed %d\r\n", Status_DMA);
				return XST_FAILURE;
			} else  xil_printf("DMA_load_Kernel_Scale -> Inizializzato \r\n");

			/* Disable interrupts,  use polling mode */
			XAxiDma_IntrDisable(&DMA_load_Kernel_Scale, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
			XAxiDma_IntrDisable(&DMA_load_Kernel_Scale, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);

		/////// DMA_load_Bias ///////
			CfgPtr_DMA_load_Bias = XAxiDma_LookupConfig(DMA_load_Bias_ID);
			if (!CfgPtr_DMA_load_Bias) {
				xil_printf("No config found for %d\r\n", DMA_load_Bias_ID);
				return XST_FAILURE;
			}

			Status_DMA = XAxiDma_CfgInitialize(&DMA_load_Bias, CfgPtr_DMA_load_Bias);
			if (Status_DMA != XST_SUCCESS) {
				xil_printf("Initialization failed %d\r\n", Status_DMA);
				return XST_FAILURE;
			} else  xil_printf("DMA_load_Bias -> Inizializzato \r\n");

			/* Disable interrupts,  use polling mode */
			XAxiDma_IntrDisable(&DMA_load_Bias, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
			XAxiDma_IntrDisable(&DMA_load_Bias, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);

		/*********** END Initialize DMA ***********/
		/*********** Impostazione stato SETUP ***********/

				sleep(5); // wait for 1sec

				/* Send combination 10 -> STATE SETUP of PL */
				XGpio_DiscreteWrite(&Gpio, START         , 1);
				XGpio_DiscreteWrite(&Gpio, CLASSIFICATION, 0);
				xil_printf("START = 1 , CLASSIFICATION = 0 -> SETUP MODE\r\n");

				sleep(1); // wait for 1sec
		/************************************************/

    cleanup_platform();
    return 0;
}
